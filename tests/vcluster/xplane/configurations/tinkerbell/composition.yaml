apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xplane-tinkerbell
spec:
  compositeTypeRef:
    apiVersion: tinkerbell.sthings.cloud/v1alpha1
    kind: XWorkflow
  mode: Pipeline
  pipeline:
  - functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      metadata:
        name: render-workflow
      spec:
        target: Resources
        params:
          oxr: {}
        source: |
          # Get the XR spec fields from the observed composite resource
          oxr = option("params")?.oxr
          workflowName = oxr?.spec?.workflowName or ""
          workflowNamespace = oxr?.spec?.workflowNamespace or "default"
          templateRef = oxr?.spec?.templateRef or ""
          hardwareRef = oxr?.spec?.hardwareRef or ""
          hardwareMap = oxr?.spec?.hardwareMap or {}
          createWorkflow = oxr?.spec?.createWorkflow or True
          workflowProviderConfigRef = oxr?.spec?.workflowProviderConfigRef or "in-cluster"

          # ConfigMap specific fields
          configMapName = oxr?.spec?.configMapName or "tinkerbell-config"
          configMapData = oxr?.spec?.configMapData or {}
          createConfigMap = oxr?.spec?.createConfigMap or False
          configMapProviderConfigRef = oxr?.spec?.configMapProviderConfigRef or "in-cluster"

          # Create the Kubernetes Object for Tinkerbell Workflow
          workflow = {
              apiVersion = "kubernetes.crossplane.io/v1alpha2"
              kind = "Object"
              metadata = {
                  name = workflowName
                  annotations = {
                      "crossplane.io/external-name" = workflowName
                  }
              }
              spec = {
                  forProvider = {
                      manifest = {
                          apiVersion = "tinkerbell.org/v1alpha1"
                          kind = "Workflow"
                          metadata = {
                              name = workflowName
                              namespace = workflowNamespace
                          }
                          spec = {
                              templateRef = templateRef
                              hardwareRef = hardwareRef
                              hardwareMap = hardwareMap
                          }
                      }
                  }
                  deletionPolicy = "Delete"
                  managementPolicies = ["*"]
                  providerConfigRef = {
                      name = workflowProviderConfigRef
                  }
              }
          }

          # Create the Kubernetes Object for ConfigMap
          config_map = {
              apiVersion = "kubernetes.crossplane.io/v1alpha2"
              kind = "Object"
              metadata = {
                  name = configMapName
                  annotations = {
                      "crossplane.io/external-name" = configMapName
                  }
              }
              spec = {
                  forProvider = {
                      manifest = {
                          apiVersion = "v1"
                          kind = "ConfigMap"
                          metadata = {
                              name = configMapName
                              namespace = workflowNamespace
                          }
                          data = configMapData
                      }
                  }
                  deletionPolicy = "Delete"
                  managementPolicies = ["*"]
                  providerConfigRef = {
                      name = configMapProviderConfigRef
                  }
              }
          }

          # Return the resources to create - FIXED: Build list immutably
          workflow_list = [workflow] if createWorkflow else []
          config_map_list = [config_map] if createConfigMap else []
          items = workflow_list + config_map_list
    step: render-workflow